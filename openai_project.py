# -*- coding: utf-8 -*-
"""OpenAI Project 1.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iszRBDosybBalIHfQSxWNltY_X4k0Zt1
"""

# Importação de bibliotecas necessárias

from openai import OpenAI
import pandas as pd
import random
import numpy as np
from datetime import datetime, timedelta

# Funções

# Prompt para efetuar tratamentos de coluna em looping
def gerar_prompt_transformacao(coluna):
  prompt_transformacao_inicio = f'Assuma o papel de um Egenheiro de Dados especialista em ETL. Tenho um DataFrame chamado "df", quero que você analise essas colunas e seus respectivos tipos: {df.dtypes} .Vamos focar apenas na coluna: \n'
  prompt_transformacao_meio = f' Vou te mostrar um pequeno pedaço dos dados, para você entender melhor o dataframe: \n {df[coluna].head(25)} '
  prompt_transformacao_final = f' A coluna {coluna} precisa de algum tipo de alteração? Se sim, quero que você envie *SOMENTE OS CÓDIGOS*, nada mais que os códigos, para fazer os ajustes necessários. Se caso não precise, quero que você responda simplesmente "N". \
  \n *IMPORTANTE*: \n \
  - Em colunas numéricas - Colunas identificadas como ID devem ser mantidas como String. \
  - Analise bem os dados em relação ao nome da coluna antes de fazer qualquer tipo de alteração.\
  - Colunas como AGE são diferentes de AGE_RATING, não mude valores como 18+ para 18, ou F para espaço vazio ("")'

  prompt_transformacao_completo = f'{prompt_transformacao_inicio}{coluna}{prompt_transformacao_meio}{prompt_transformacao_final}'
  return prompt_transformacao_completo


# Função para gerar o prompt para de pergunta para o ChatGPT
def gerar_prompt(pergunta, df_exemplo, df_dtypes) -> str:
    """
    Gera um prompt personalizado para enviar ao ChatGPT, adaptando-se ao contexto da pergunta.

    Parâmetros:
    - pergunta (str): A questão que será enviada para a IA.
    - df (pd.DataFrame): O DataFrame que será analisado.
    - executar (bool): Se True, retorna um código pronto para execução. Se False, retorna um código com comentários.

    Retorna:
    - str: O prompt formatado para enviar à API do ChatGPT.
    """

    # Definição de trechos do prompt
    prompt_comeco = f"""
    Você é um assistente especialista em análise de dados e Python.
    Tenho um DataFrame chamado **df** com as seguintes colunas e tipos de dados:
    """

    colunas_tipos = f"\n Colunas e tipos de dados: \n{df_dtypes}\n"
    exemplo_dados = f"\n Exemplo de 5 linhas do DataFrame: \n{df_exemplo}\n"

    prompt_meio = """
    Instruções:
    - Sua resposta deve conter **apenas o código Python**, sem explicações extras.
    - O código deve **rodar sem erros** e entregar a resposta correta.
    - Se necessário, converta os tipos de dados antes de executar os cálculos.
    - Sempre no começo de um comando, escreva *comando: *, por exemplo: comando: print('teste').
    - Se a pergunta for sobre datas, use a coluna `Data`, garantindo que esteja no formato datetime.
    - Se atente aos caracteres especiais dentro das colunas, como '-'.
    - Não utilize pd.NA para substituições de caracteres, caso seja necessário, transforme em um espaço vazio
    - Antes de qualquer alteração no tipo de coluna, verifique se não é necessário a remoção de dados que não conferem com o novo tipo, por exemplo '-' em colunas de data ou numérica (em caso de replace, utilize regex para evitar permanencia de dados indesejados)
    """

    prompt_final = f"""
    Pergunta:
    "{pergunta}"

    IMPORTANTE:
    - Apenas retorne o código correto, precedido por 'comando: '. **Não escreva texto adicional.**
    - Antes de responder, valide mentalmente se o código está correto.
    - O código retornado deve estar pronto para ser **diretamente executado** sem modificações.

    SUPER IMPORTANTE:
    Se atente aos dados da coluna antes de tentar fazer a alteração do tipo de coluna, principalmente se ela precisa de algum tipo de limpeza.
    Antes de enviar o código, tenha certeza que o mesmo irá funcionar.
        """
    prompt = f"{prompt_comeco}{colunas_tipos}{exemplo_dados}{prompt_meio}{prompt_final}"

    return prompt


# Função para realizar perguntas ao ChatGPT
def gpt_question(prompt):
  completion = client.chat.completions.create(
    model="gpt-4o-mini",
    store=True,
    messages=[
      {"role": "user", "content": prompt}
    ]
  )
  response = completion.choices[0].message.content.strip()
  return response


# Função para executar os códigos recebidos pelo ChatGPT e retornar o resultado final
def executar_codigos(codigos_recebidos):
    codigos_tratados = codigos_recebidos.strip().split("\n")  # Divide códigos por linha
    codigos_tratados = codigos_tratados[1:-1]  # Remove cabeçalho e rodapé indesejado
    codigos_tratados = [codigo.replace('comando: ', '').strip() for codigo in codigos_tratados if codigo.strip()]  # Remove comandos vazios

    if not codigos_tratados:
        print("Erro: Nenhum código válido foi recebido.")
        return None

    resultado = None  # Variável para armazenar o último resultado válido

    for i, codigo in enumerate(codigos_tratados):
        print(f"Executando: {codigo}")
        try:
            if "=" in codigo or "plt.show()" in codigo:  # Execução direta para gráficos e atribuições
                exec(codigo, globals())
            else:
                resultado = eval(codigo, globals())  # Apenas avalia expressões que retornam algo
        except Exception as e:
            print(f"Erro ao executar código: {codigo}\n Detalhes do erro: {e}")

    return resultado


# Função para realizar as primeiras transformações no dataframe (como alterações de tipo de coluna, limpeza de dados, etc)
def realizar_transformacao(coluna):
    global df

    prompt_transformacao_completo = gerar_prompt_transformacao(coluna)  # Recebe o código de tratamento do ChatGPT
    codigos_recebidos = gpt_question(prompt_transformacao_completo)

    try:
        resultado = executar_codigos(codigos_recebidos)  # Tenta executar e retorna o resultado

    except Exception as e:
        print(f'\n Tentativa falhou. Erro: {e}. Coluna: {coluna}.')

        prompt_transformacao_completo += f'\n*Erro ocorrido ao executar o código:* {e}. Por favor, corrija e envie um código ajustado.' # Cria um novo prompt informando o erro ao ChatGPT
        codigos_recebidos = gpt_question(prompt_transformacao_completo) # Chamar o ChatGPT novamente para obter um novo código corrigido

        try:
            resultado = executar_codigos(codigos_recebidos)  # Segunda tentativa
        except Exception as e2:
            print(f'\n Segunda tentativa falhou. Erro: {e2}. Registrando erro e seguindo em frente.')
            resultado = None  # Evita loop infinito

    print("Resultado final:", resultado)
    return resultado


# Função para coletar a pergunta do usuário, gerar o prompt e executar o código recebido
def fazer_pergunta():
    global df  # Garante que df esteja acessível

    pergunta_usuario = input("Digite sua pergunta aqui: \n")
    prompt = gerar_prompt(pergunta_usuario, df.head(20), df.dtypes)

    codigos_recebidos = gpt_question(prompt)  # Recebe o código do ChatGPT

    resultado = executar_codigos(codigos_recebidos)  # Executa e retorna o resultado
    print("Resultado da consulta:", resultado)
    return resultado

# Variáveis

# Informando API Key para utilização do API da OpenAI
client = OpenAI(
  api_key="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"
)

df = pd.read_csv('/content/nintendo-sending-packages.csv', encoding='latin1')
df = df.dropna(how='all')
df = df.drop_duplicates()
df.head(5)

# Enviando informações de cada coluna para a Inteligencia Artificial analisar e sugerir tratamento.

for coluna in df.columns:
  print(f'\n Trabalhando na coluna: {coluna}')
  realizar_transformacao(coluna)
  print('\n ')

df.dtypes

"""## Análises Exploratórias"""

# Utilizando a mesma API, podemos facilitar a análise, enviando apenas a pergunta desejada para o ChatGPT e obtendo o código executado sozinho como resposta

# Faça um gráfico com o ticket médio de cada região.
fazer_pergunta()

# Faça um gráfico mostrando quantos jogos cada publisher tem em estoque
quantidade_de_cada_plano = fazer_pergunta()

# Qual publisher com maior número de vendas concluídas? Faça um gráfico de comparação entre eles
quantidade_de_cada_plano_grafico = fazer_pergunta()

# Existe correlação entre idade do público e preço do jogo?
fazer_pergunta()

# Quais classificações etárias vendem mais?
fazer_pergunta()

# Qual mês teve mais pedidos enviados?
fazer_pergunta()

# # Qual mês teve mais pedidos enviados? Faça um gráfico comparativo
fazer_pergunta()

